import pygame
import random

# Define colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GRAY = (200, 200, 200)

# Define box dimensions
WIDTH = 540
HEIGHT = 540
BOX_SIZE = 9
CELL_SIZE = WIDTH // BOX_SIZE

def generate_sudoku():
    puzzle = [[0]*BOX_SIZE for _ in range(BOX_SIZE)]
    solve_sudoku(puzzle)
    remove_cells(puzzle)
    return puzzle

def solve_sudoku(box):
    find = find_empty(box)
    if not find:
        return True
    else:
        row, col = find
    
    for no in range(1, 10):
        if is_valid(box, row, col, no):
            box[row][col] = no
            
            if solve_sudoku(box):
                return True
            
            box[row][col] = 0
            
    return False

def is_valid(box, row, col, no):
    # Check row
    if no in box[row]:
        return False
    
    # Check column
    for i in range(BOX_SIZE):
        if box[i][col] == no:
            return False
    
    # Check subgrid
    start_row, start_col = 3 * (row // 3), 3 * (col // 3)
    for i in range(start_row, start_row + 3):
        for j in range(start_col, start_col + 3):
            if box[i][j] == no:
                return False
    
    return True

def find_empty(box):
    for i in range(BOX_SIZE):
        for j in range(BOX_SIZE):
            if box[i][j] == 0:
                return (i, j)
    return None

def remove_cells(box, difficulty=30):
    cells_to_remove = BOX_SIZE**2 - difficulty
    for _ in range(cells_to_remove):
        row = random.randint(0, BOX_SIZE - 1)
        col = random.randint(0, BOX_SIZE - 1)
        box[row][col] = 0

def draw_grid(screen):
    for i in range(1, BOX_SIZE):
        if i % 3 == 0:
            pygame.draw.line(screen, BLACK, (i * CELL_SIZE, 0), (i * CELL_SIZE, HEIGHT), 4)
            pygame.draw.line(screen, BLACK, (0, i * CELL_SIZE), (WIDTH, i * CELL_SIZE), 4)
        else:
            pygame.draw.line(screen, BLACK, (i * CELL_SIZE, 0), (i * CELL_SIZE, HEIGHT), 2)
            pygame.draw.line(screen, BLACK, (0, i * CELL_SIZE), (WIDTH, i * CELL_SIZE), 2)

def draw_no(screen, box):
    font = pygame.font.Font(None, 50)
    for i in range(BOX_SIZE):
        for j in range(BOX_SIZE):
            if box[i][j] != 0:
                text = font.render(str(box[i][j]), True, BLACK)
                text_rect = text.get_rect(center=(j * CELL_SIZE + CELL_SIZE // 2, i * CELL_SIZE + CELL_SIZE // 2))
                screen.blit(text, text_rect)

def draw(screen, box):
    screen.fill(WHITE)
    draw_grid(screen)
    draw_no(screen, box)
    pygame.display.flip()

def main():
    pygame.init()
    screen = pygame.display.set_mode((WIDTH, HEIGHT))
    pygame.display.set_caption("Sudoku Solver")
    clock = pygame.time.Clock()
    
    sudoku = generate_sudoku()
    print("Generated Sudoku Puzzle:")
    for row in sudoku:
        print(row)

    solve_sudoku(sudoku)

    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
        
        draw(screen, sudoku)
        clock.tick(60)

    pygame.quit()

if __name__ == "__main__":
    main()
